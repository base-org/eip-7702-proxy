{"abi":[{"type":"function","name":"domainSeparator","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"eip712Domain","inputs":[],"outputs":[{"name":"fields","type":"bytes1","internalType":"bytes1"},{"name":"name","type":"string","internalType":"string"},{"name":"version","type":"string","internalType":"string"},{"name":"chainId","type":"uint256","internalType":"uint256"},{"name":"verifyingContract","type":"address","internalType":"address"},{"name":"salt","type":"bytes32","internalType":"bytes32"},{"name":"extensions","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"isValidSignature","inputs":[{"name":"hash","type":"bytes32","internalType":"bytes32"},{"name":"signature","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"result","type":"bytes4","internalType":"bytes4"}],"stateMutability":"view"},{"type":"function","name":"replaySafeHash","inputs":[{"name":"hash","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"domainSeparator()":"f698da25","eip712Domain()":"84b0196e","isValidSignature(bytes32,bytes)":"1626ba7e","replaySafeHash(bytes32)":"ce1506be"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"result\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"replaySafeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Coinbase (https://github.com/coinbase/smart-wallet)Solady (https://github.com/vectorized/solady/blob/main/src/accounts/ERC1271.sol)\",\"details\":\"To prevent the same signature from being validated on different accounts owned by the samer signer,      we introduce an anti cross-account-replay layer: the original hash is input into a new EIP-712 compliant      hash. The domain separator of this outer hash contains the chain id and address of this contract, so that      it cannot be used on two accounts (see `replaySafeHash()` for the implementation details).\",\"kind\":\"dev\",\"methods\":{\"domainSeparator()\":{\"details\":\"Implements domainSeparator = hashStruct(eip712Domain).      See https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator.\",\"returns\":{\"_0\":\"The 32 bytes domain separator result.\"}},\"eip712Domain()\":{\"details\":\"Follows ERC-5267 (see https://eips.ethereum.org/EIPS/eip-5267).\",\"returns\":{\"chainId\":\"The value of the `EIP712Domain.chainId` field.\",\"extensions\":\"The list of EIP numbers, that extends EIP-712 with new domain fields.\",\"fields\":\"The bitmap of used fields.\",\"name\":\"The value of the `EIP712Domain.name` field.\",\"salt\":\"The value of the `EIP712Domain.salt` field.\",\"verifyingContract\":\"The value of the `EIP712Domain.verifyingContract` field.\",\"version\":\"The value of the `EIP712Domain.version` field.\"}},\"isValidSignature(bytes32,bytes)\":{\"details\":\"This implementation follows ERC-1271. See https://eips.ethereum.org/EIPS/eip-1271.IMPORTANT: Signature verification is performed on the hash produced AFTER applying the anti      cross-account-replay layer on the given `hash` (i.e., verification is run on the replay-safe      hash version).\",\"params\":{\"hash\":\"The original hash.\",\"signature\":\"The signature of the replay-safe hash to validate.\"},\"returns\":{\"result\":\"`0x1626ba7e` if validation succeeded, else `0xffffffff`.\"}},\"replaySafeHash(bytes32)\":{\"details\":\"The returned EIP-712 compliant replay-safe hash is the result of:      keccak256(         \\\\x19\\\\x01 ||         this.domainSeparator ||         hashStruct(CoinbaseSmartWalletMessage({ hash: `hash`}))      )\",\"params\":{\"hash\":\"The original hash.\"},\"returns\":{\"_0\":\"The corresponding replay-safe hash.\"}}},\"stateVariables\":{\"_MESSAGE_TYPEHASH\":{\"details\":\"Precomputed `typeHash` used to produce EIP-712 compliant hash when applying the anti      cross-account-replay layer.      The original hash must either be:         - An EIP-191 hash: keccak256(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" || len(someMessage) || someMessage)         - An EIP-712 hash: keccak256(\\\"\\\\x19\\\\x01\\\" || someDomainSeparator || hashStruct(someStruct))\"}},\"title\":\"ERC-1271\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"domainSeparator()\":{\"notice\":\"Returns the `domainSeparator` used to create EIP-712 compliant hashes.\"},\"eip712Domain()\":{\"notice\":\"Returns information about the `EIP712Domain` used to create EIP-712 compliant hashes.\"},\"isValidSignature(bytes32,bytes)\":{\"notice\":\"Validates the `signature` against the given `hash`.\"},\"replaySafeHash(bytes32)\":{\"notice\":\"Wrapper around `_eip712Hash()` to produce a replay-safe hash fron the given `hash`.\"}},\"notice\":\"Abstract ERC-1271 implementation (based on Solady's) with guards to handle the same         signer being used on multiple accounts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/smart-wallet/src/ERC1271.sol\":\"ERC1271\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":FreshCryptoLib/=lib/smart-wallet/lib/webauthn-sol/lib/FreshCryptoLib/solidity/src/\",\":account-abstraction/=lib/smart-wallet/lib/account-abstraction/contracts/\",\":ds-test/=lib/smart-wallet/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":p256-verifier/=lib/smart-wallet/lib/p256-verifier/\",\":safe-singleton-deployer-sol/=lib/smart-wallet/lib/safe-singleton-deployer-sol/\",\":smart-wallet/=lib/smart-wallet/src/\",\":solady/=lib/smart-wallet/lib/solady/src/\",\":webauthn-sol/=lib/smart-wallet/lib/webauthn-sol/src/\"],\"viaIR\":true},\"sources\":{\"lib/smart-wallet/src/ERC1271.sol\":{\"keccak256\":\"0xa9e22c15b7bffce561ab4fcb430a796e306acbf1c8be757b9a2f15546e96ddd2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://25f8b3d4233c419174f99dc021b0c29fc4f85ed2278fec9419dae7d93a2d9481\",\"dweb:/ipfs/QmTetkPJt5N4Ld9aDMySkjkQQeEBG75HA5LAHdU39ZqnhW\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"view","type":"function","name":"domainSeparator","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"eip712Domain","outputs":[{"internalType":"bytes1","name":"fields","type":"bytes1"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"verifyingContract","type":"address"},{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"uint256[]","name":"extensions","type":"uint256[]"}]},{"inputs":[{"internalType":"bytes32","name":"hash","type":"bytes32"},{"internalType":"bytes","name":"signature","type":"bytes"}],"stateMutability":"view","type":"function","name":"isValidSignature","outputs":[{"internalType":"bytes4","name":"result","type":"bytes4"}]},{"inputs":[{"internalType":"bytes32","name":"hash","type":"bytes32"}],"stateMutability":"view","type":"function","name":"replaySafeHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]}],"devdoc":{"kind":"dev","methods":{"domainSeparator()":{"details":"Implements domainSeparator = hashStruct(eip712Domain).      See https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator.","returns":{"_0":"The 32 bytes domain separator result."}},"eip712Domain()":{"details":"Follows ERC-5267 (see https://eips.ethereum.org/EIPS/eip-5267).","returns":{"chainId":"The value of the `EIP712Domain.chainId` field.","extensions":"The list of EIP numbers, that extends EIP-712 with new domain fields.","fields":"The bitmap of used fields.","name":"The value of the `EIP712Domain.name` field.","salt":"The value of the `EIP712Domain.salt` field.","verifyingContract":"The value of the `EIP712Domain.verifyingContract` field.","version":"The value of the `EIP712Domain.version` field."}},"isValidSignature(bytes32,bytes)":{"details":"This implementation follows ERC-1271. See https://eips.ethereum.org/EIPS/eip-1271.IMPORTANT: Signature verification is performed on the hash produced AFTER applying the anti      cross-account-replay layer on the given `hash` (i.e., verification is run on the replay-safe      hash version).","params":{"hash":"The original hash.","signature":"The signature of the replay-safe hash to validate."},"returns":{"result":"`0x1626ba7e` if validation succeeded, else `0xffffffff`."}},"replaySafeHash(bytes32)":{"details":"The returned EIP-712 compliant replay-safe hash is the result of:      keccak256(         \\x19\\x01 ||         this.domainSeparator ||         hashStruct(CoinbaseSmartWalletMessage({ hash: `hash`}))      )","params":{"hash":"The original hash."},"returns":{"_0":"The corresponding replay-safe hash."}}},"version":1},"userdoc":{"kind":"user","methods":{"domainSeparator()":{"notice":"Returns the `domainSeparator` used to create EIP-712 compliant hashes."},"eip712Domain()":{"notice":"Returns information about the `EIP712Domain` used to create EIP-712 compliant hashes."},"isValidSignature(bytes32,bytes)":{"notice":"Validates the `signature` against the given `hash`."},"replaySafeHash(bytes32)":{"notice":"Wrapper around `_eip712Hash()` to produce a replay-safe hash fron the given `hash`."}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","FreshCryptoLib/=lib/smart-wallet/lib/webauthn-sol/lib/FreshCryptoLib/solidity/src/","account-abstraction/=lib/smart-wallet/lib/account-abstraction/contracts/","ds-test/=lib/smart-wallet/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","p256-verifier/=lib/smart-wallet/lib/p256-verifier/","safe-singleton-deployer-sol/=lib/smart-wallet/lib/safe-singleton-deployer-sol/","smart-wallet/=lib/smart-wallet/src/","solady/=lib/smart-wallet/lib/solady/src/","webauthn-sol/=lib/smart-wallet/lib/webauthn-sol/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/smart-wallet/src/ERC1271.sol":"ERC1271"},"evmVersion":"shanghai","libraries":{},"viaIR":true},"sources":{"lib/smart-wallet/src/ERC1271.sol":{"keccak256":"0xa9e22c15b7bffce561ab4fcb430a796e306acbf1c8be757b9a2f15546e96ddd2","urls":["bzz-raw://25f8b3d4233c419174f99dc021b0c29fc4f85ed2278fec9419dae7d93a2d9481","dweb:/ipfs/QmTetkPJt5N4Ld9aDMySkjkQQeEBG75HA5LAHdU39ZqnhW"],"license":"MIT"}},"version":1},"id":49}